#use "constants_lib.ic"
#use "encoder_lib.ic"
#use "movement_lib.ic"
#use "implement_lib.ic"
#use "general_lib.ic"
#use "gps_lib.ic"

int main()
{
    int startLightValue = 0;
    int leftLineFloorValue;
    int centerLineFloorValue;
    int rightLineFloorValue;
    int knobValue;
    int gemColor = BLUE;
    
    initServo(implementServo);
    initEncoders(); 
    
    implement(IMPLEMENT_UP);
    
    startLightValue = analog(startLightPort);
    leftLineFloorValue = analog(leftLinePort);
    centerLineFloorValue = analog(centerLinePort);
    rightLineFloorValue = analog(rightLinePort);
    
    initGPS();
    
    // Wait for start light or start button.
    while(!stop_button())
      {
        sleep(0.1);
        knobValue = knob() / 24; // value of 0 to 10
        switch (knobValue)
          {
            case 0: printf("0: From Start\n"); break;
            case 1: printf("1: Depress Plunger\n"); break;
            case 2: printf("2: Get Gem\n"); break;
            case 3: printf("3: Box/wall\n"); break;
            case 4: printf("4: Servo test\n"); break;
            case 5: printf("5: Gem color test\n"); break;
            case 6: printf("6: Analog test\n"); break;
            case 7: printf("7: GPS test\n"); break;
            case 8: printf("8: Just up Ramp\n"); break;
            case 9: printf("9: Line follow test\n"); break;
            default: printf("%d: From Start\n", knobValue); knobValue =  0; break;
        }
    }
    while(stop_button());
    leftLineFloorValue = analog(leftLinePort);
    centerLineFloorValue = analog(centerLinePort);
    rightLineFloorValue = analog(rightLinePort);
    if (knobValue == 0) // Everything
    {
        printf("Waiting on light\n");
        startLightValue = analog(startLightPort);
        WaitForStartLight(startLightValue);
        // Save start light value when it's on so we can compare the gem light to it.
        startLightValue = analog(startLightPort);
        DropOffDynamite();
    } if (knobValue <= 1)  {// Press plunger
        GotoPlunger();
        HitPlunger(leftLineFloorValue, centerLineFloorValue, rightLineFloorValue);
        sleep(2.0);  // wait for ramp
    } if (knobValue <= 2) {// get gem
        UpRamp(leftLineFloorValue, centerLineFloorValue, rightLineFloorValue);
        GetGem();
        gemColor = GetGemColor();
    }
    if(knobValue <= 3) // Box/wall
    {
        ToBox();
        DropOffGem();
        GetGemColor();
        ToWall();
        RaiseWall();
    }
    if (knobValue == 8)
    {
        while(1)
        {
            printf("Starting Up the Ramp Test\n");
            while (!stop_button());
            UpRamp(leftLineFloorValue, centerLineFloorValue, rightLineFloorValue);
            GetGem();
            gemColor = GetGemColor();
        }
    }
    if (knobValue == 7) { // GPS Test
        printf("Waiting for GPS\n");
        while(1)
          {
            // Wait for data
            
            while(!gps_get_data());
            // Print out gps variables
            printf("%d %d %d %d\n", gps_x, gps_y, gps_heading, gps_debris);
        }
    }
    if (knobValue == 4) {// Servo test
        while(1)
          {
            sleep(0.1);
            implement((int)((((float)knob()) / 255.0) * 180.0));
            printf("Servo: %d\n", (int)((((float)knob()) / 255.0) * 180.0));
        }
    }
    if (knobValue == 5)
    {// Formerly gem servo test, now gem color test
        /**implement(IMPLEMENT_GEM);
        sleep(1.0);
        while(!gps_get_data());
        while(gps_y < 240)
          {
            while(!gps_get_data());
            drive(100, 100);
        }
        drive(0, 0);*/
        while(!stop_button())
        {
            if(analog(startLightPort) < startLightValue - RED_THRESHOLD)
            {
                printf("RED GEM\n");
            }
            else
            {
                printf("BLUE GEM\n");
            }
            msleep(100L);
        }
    }
    if (knobValue == 6) // Formerly GPS turn test; now hi-jacked for analog sensor test. HA!
    {
        /*turn(45, FORWARD_LEFT);
        beep(); beep();
        msleep(2000L);
        turn(45, FORWARD_RIGHT);
        beep(); beep();
        msleep(2000L);
        turn(90, BACKWARD_LEFT);
        beep(); beep();
        msleep(2000L);
        turn(90, FORWARD_RIGHT);
        beep(); beep();
        GPSTurn(90, LEFT);
        msleep(4000L);
        GPSTurn(90, RIGHT);
        msleep(4000L);
        GPSTurn(90, LEFT);
        msleep(4000L);
        GPSTurn(90, RIGHT);*/
        while(!stop_button())
        {
            printf("%d:%d %d:%d %d:%d %d:%d\n", startLightPort, analog(startLightPort), leftLinePort, analog(leftLinePort), centerLinePort, analog(centerLinePort), rightLinePort, analog(rightLinePort));
            msleep(100L);
        }
    }
    /**if (knobValue == 7) // Hi-jacked for GPS test
    {
        implement(180);
        msleep(3000L);
        implement(0);
        msleep(3000L);
        implement(180);
        msleep(3000L);
        implement(0);
    }*/
    if(knobValue == 9)
    {
        printf("Hit stop to start.\n");
        while (!stop_button());
        msleep(500L);
        driveStraightWaitForLine(centerLineFloorValue);
        // Line follow test
        while(1) followLine(leftLineFloorValue, centerLineFloorValue, rightLineFloorValue);
    }
    
    sleep(3.0); // Let servos finish moving before disabling
    
    disableServo();
    
    disableGPS();
}
