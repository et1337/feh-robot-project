#use "constants_lib.ic"
#use "encoder_lib.ic"
#use "movement_lib.ic"
#use "implement_lib.ic"
#use "general_lib.ic"
#use "gps_lib.ic"

int main()
{
    int startLightValue = 0;
    int leftLineFloorValue;
    int centerLineFloorValue;
    int rightLineFloorValue;
    int knobValue;
    //int gemColor = BLUE;
    
    
    initServo(implementServo);
    initEncoders();
    
    implement(IMPLEMENT_UP);
    
    startLightValue = analog(startLightPort);
    leftLineFloorValue = analog(leftLinePort);
    centerLineFloorValue = analog(centerLinePort);
    rightLineFloorValue = analog(rightLinePort);
    
    initGPS();
    
    // Wait for start light or start button.
    while(!stop_button())
      {
        sleep(0.1);
        knobValue = knob() / 24; // value of 0 to 10
        switch (knobValue)
          {
            case 0: printf("0: From Start\n"); break;
            case 1: printf("1: Depress Plunger\n"); break;
            case 2: printf("2: Get Gem\n"); break;
            case 3: printf("3: Box/wall\n"); break;
            case 4: printf("4: BackToBase\n"); break;
            case 5: printf("5: ZOMG! NOTHING HERE!\n"); break;
            case 6: printf("6: Analog test\n"); break;
            case 7: printf("7: GPS test\n"); break;
            case 8: printf("8: GPSTurnTo test\n"); break;
            case 9: printf("9: Servo test\n"); break;
            default: printf("%d: From Start\n", knobValue); knobValue =  0; break;
        }
    }
    while(stop_button());
    if (knobValue == 0) // Everything
      {
        printf("Waiting on light\n");
        leftLineFloorValue = analog(leftLinePort);
        centerLineFloorValue = analog(centerLinePort);
        rightLineFloorValue = analog(rightLinePort);
        startLightValue = analog(startLightPort);
        centerLine = centerLineFloorValue;
        WaitForStartLight(startLightValue);
        // Save start light value when it's on so we can compare the gem light to it.
        startLightValue = analog(startLightPort);
        DropOffDynamite();
    } if (knobValue <= 1)  {// Press plunger
        GotoPlunger();
        HitPlunger(leftLineFloorValue, centerLineFloorValue, rightLineFloorValue);
        sleep(0.5);  // wait for ramp
    } if (knobValue <= 2) {// get gem
        UpRamp();
        GetGem();
    }
    if(knobValue <= 3) // Box/wall
      {
        
        BoxWall(gemColor);
        
    }
    if(knobValue <= 4) // Back to base
      {
        BackToBase();
    }
    if (knobValue == 8)
      {
        while(1)
          {
            while(!stop_button())
              {
                printf("GPS Turn To: %d\n", (int)((((float)knob()) / 255.0) * 180.0));
                msleep(100L);
            }
            GPSTurnTo((int)((((float)knob()) / 255.0) * 180.0));
        }
    }
    if (knobValue == 7) { // GPS Test
        printf("Waiting for GPS\n");
        while(1)
          {
            // Wait for data
            
            while(!gps_get_data());
            // Print out gps variables
            printf("%d %d %d %d\n", gps_x, gps_y, gps_heading, gps_debris);
        }
    }
    if (knobValue == 9) {// Servo test
        while(1)
          {
            sleep(0.1);
            implement((int)((((float)knob()) / 255.0) * 180.0));
            printf("Servo: %d\n", (int)((((float)knob()) / 255.0) * 180.0));
        }
    }
    if (knobValue == 5)
      {
        // ZOMG! NOTHING HERE!
    }
    if (knobValue == 6) // Formerly GPS turn test; now hi-jacked for analog sensor test. HA!
      {
        while(!stop_button())
          {
            printf("%d:%d %d:%d %d:%d %d:%d %d:%d %d:%d\n", CDS_LEFT, analog(CDS_LEFT), startLightPort, analog(startLightPort), CDS_RIGHT, analog(CDS_RIGHT), centerLinePort, analog(centerLinePort), leftEncoder, analog(leftEncoder), rightEncoder, analog(rightEncoder));
            msleep(100L);
        }
    }
    
    sleep(3.0); // Let servos finish moving before disabling
    
    disableServo();
    
    disableGPS();
}
