#use "exp_servo_lib.ic"
#use "exp_servo_calibrate.ic"

// Motors
#define leftMotor 0
#define rightMotor 2

// Servos
#define verticalServo 0

// Analog sensors
#define leftEncoder 2
#define rightEncoder 3
#define startLightPort 4
#define leftLinePort 16
#define centerLinePort 17
#define rightLinePort 18

// Sensor constants
#define ENCODER_THRESHOLD 9
#define START_LIGHT_THRESHOLD 10
#define LINE_THRESHOLD 10

void encoderCount(int port, int ticks)
{
    int count = 0;
    int lastValue = analog(port);
    int value = lastValue;
    while(count < ticks)
      {
        value = analog(port);
        if(value - lastValue > ENCODER_THRESHOLD || value - lastValue < -ENCODER_THRESHOLD)
          {
            count++;
        }
        lastValue = value;
    }
}

void drive(int left, int right)
{
    motor(leftMotor, left);
    motor(rightMotor, right);
}

void driveLimit(int left, int right)
{
    int lcount = 0;
    int llastValue = analog(leftEncoder);
    int lvalue = llastValue;
    int rcount = 0;
    int rlastValue = analog(rightEncoder);
    int rvalue = rlastValue;
    
    while(lcount < left || rcount < right)
      {
        lvalue = analog(leftEncoder);
        rvalue = analog(rightEncoder);
        if(lvalue - llastValue > ENCODER_THRESHOLD || lvalue - llastValue < -ENCODER_THRESHOLD)
          {
            lcount++;
            if(lcount >= left)
              motor(leftMotor, 0);
        }
        llastValue = lvalue;
        if(rvalue - rlastValue > ENCODER_THRESHOLD || rvalue - rlastValue < -ENCODER_THRESHOLD)
          {
            rcount++;
            if(rcount >= right)
              motor(rightMotor, 0);
        }
        rlastValue = rvalue;
    }
}

void waitForLineEdge()
{
    int value = analog(centerLinePort);
    while(analog(centerLinePort) < value + LINE_THRESHOLD);
    value = analog(centerLinePort);
    while(analog(centerLinePort) > value - LINE_THRESHOLD);
}

int main()
{
    int startLightValue;
    long startTime;
    
    exp_servo_enable();
    
    exp_servo_min[verticalServo] = 2588;
    exp_servo_max[verticalServo] = 4078;
    
    // Vertical servo is backwards: 180 is down.
    exp_servo_deg(verticalServo, 180);
    
    while(!start_button());
    while(start_button());
    startLightValue = analog(startLightPort);
    
    // Wait for start light or start button.
    while(!(start_button() || analog(startLightPort) < startLightValue - START_LIGHT_THRESHOLD))
      printf("%d\n", analog(startLightPort));
    
    while(!stop_button())
    {  
        exp_servo_deg(verticalServo, (int)(((float)knob()/(float)255)*(float)180));
        printf("%d\n", (int)(((float)knob()/(float)255)*(float)180));
        sleep(0.1);
    }
    
    exp_servo_disable();
}
