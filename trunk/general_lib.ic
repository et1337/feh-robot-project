
#include "constants_lib.ic"
#include "encoder_lib.ic"
#include "movement_lib.ic"
#include "implement_lib.ic"


void WaitForStartLight(int startLightValue)
{
    while(analog(startLightPort) > startLightValue - START_LIGHT_THRESHOLD && !start_button());
}

void DropOffDynamite()
{
    // Drive down the ramp
    speed = 80;
    driveStraight(ticks(10.0), FORWARD);
    driveStraightToY(115, FORWARD);
    // Turn toward dynamite dropbox
    GPSTurn(17, LEFT);
    GPSTurnTo(41);
    FollowHeading(ticks(10.0), FORWARD, 41);    
    // Drive toward dropbox
    driveStraightToY(177, FORWARD);
    // Drop dynamite
    implement(IMPLEMENT_DOWN);
    msleep(750L);
    driveStraight(ticks(0.5), BACKWARD);
    implement(IMPLEMENT_UP);
    msleep(100L);
    implement(IMPLEMENT_DOWN);
    msleep(250L);
    driveStraight(ticks(0.5), BACKWARD);
    implement(IMPLEMENT_UP);
}
void GotoPlunger()
{
    // Back up a little
    driveStraight(ticks(12.0), BACKWARD);
    GPSTurn(20, LEFT);
    GPSTurnTo(90);
    driveStraight(ticks(14.0), FORWARD);
    GPSTurn(30, RIGHT);
    GPSTurnTo(41);
    driveStraight(ticks(8.0), FORWARD);
    driveStraightWaitForLine(centerLine);
    driveStraight(ticks(1.4), FORWARD);
    driveT(-100, 100, 700L);
    GPSTurnTo(138);
}
void HitPlunger(int center)
{
    int count = 0;
    speed = 90;
    printf("HitPlunger()\n");
    implement(IMPLEMENT_UP);
    HeadingToY(190, 138, FORWARD);
    implement(IMPLEMENT_DOWN);
    msleep(500L);
    implement(IMPLEMENT_UP);
    msleep(1000L);
    driveStraight(ticks(1.0), BACKWARD);
    implement(IMPLEMENT_DOWN);
    msleep(500L);
    implement(IMPLEMENT_UP);
    msleep(1000L);
    
}
void UpRamp()
{
    printf("UpRamp()\n");
    speed = 100;
    driveStraight(ticks(5.0), BACKWARD);
    GPSTurn(160, RIGHT);
    driveStraight(ticks(.2), BACKWARD);
    GPSTurnTo(138);
    driveStraight(ticks(4.0), FORWARD);
    FollowHeading(ticks(10.0), FORWARD, 138);
    implement(IMPLEMENT_GEM);
    msleep(500L);
    FollowHeading(ticks(9.5), FORWARD, 138);
    msleep(200L);
}
void GetGem()
{
    implement(IMPLEMENT_UP);
    msleep(400L);
    driveT(70, 70, 250L);
    driveT(40, 40, 250L);
    driveT(-40, -40, 50L);
    driveT(40, 40, 250L);
    
    if(GemColorHelper(1000L) == RED)
      gemColor = RED;
    if (gemColor == BLUE)
      {
        drive(-40, -40);
        if(GemColorHelper(300L) == RED) {
            gemColor = RED;
        }
        else {
            implement(IMPLEMENT_UP);
            gemColor = GetGemColor();
        }
    }
    speed = 90;
}

int GetGemColor()
{
    drive(70, 70);
    if(GemColorHelper(750L) == RED)
      return RED;
    printf("BLUE GEM\n");
    return BLUE;
}

int GemColorHelper(long time)
{
    long startTime = mseconds();
    while(mseconds() - startTime < time)
      {
        if((analog(startLightPort) < RED_THRESHOLD) || (analog(CDS_LEFT) < RED_THRESHOLD) || (analog(CDS_RIGHT) < RED_THRESHOLD))
          {
            printf("RED GEM\n");
            drive(0, 0);
            return RED;
        }
    }
    drive(0, 0);
    return BLUE;
}

void ToBoxes()
{
    
    FollowHeading(ticks(16.7), BACKWARD, 138);
    GPSTurn(59, RIGHT);
    HeadingToX(-55, 47, FORWARD);
    driveT(100, -100, 200L);
    GPSTurnTo(2);
    FollowHeading(ticks(6.0), FORWARD, 2);
}

void NextBox(int secondBox)
{
    printf("NextBox(%d)\n", secondBox);
    if(!secondBox) {
        FollowHeading(ticks(7.0), 4, FORWARD);speed = 60;
        centerLine = analog(centerLinePort);
        HeadingToLine(centerLine, 4, FORWARD);
        //HeadingToY(99, 4, FORWARD);
        speed = 80;
    }
    driveStraight(ticks(0.5), FORWARD);
    driveT(-100, 100, 700L);
    GPSTurnTo(90);
    HeadingToX(-30, 90, FORWARD);
}

void DropOffGem()
{
    FollowHeading(ticks(1.3), BACKWARD, 90);
    implement(IMPLEMENT_DOWN);
    msleep(1500L);
    implement(IMPLEMENT_UP);
    msleep(500L);
}

void ToWall(int checkedTwice)
{
    driveStraight(ticks(2.0), BACKWARD);
    GPSTurn(50, RIGHT);
    GPSTurnTo(6);
    if (checkedTwice)
      FollowHeading(ticks(1.0), BACKWARD, 6);
    GPSTurnTo(2);
    driveT(100, -100, 50L);
    implement(IMPLEMENT_DOWN);
    msleep(500L);
    driveStraightToY(66, FORWARD);
    //driveStraight(ticks(0.2), FORWARD);
    //driveT(80,80, 250L);
}

void RaiseWall()
{
    printf("RaiseWall()\n");
    while(!gps_get_data());
    if (gps_y < 66) driveStraightToY(66, BACKWARD);
    driveStraightP(ticks(0.1), BACKWARD, 20);
    implement(IMPLEMENT_WALL);
    msleep(250L);
    driveStraightP(ticks(1.0), FORWARD, 60);
    driveT(60, 60, 2000L);
}

void BackToBase()
{
    printf("BackToBase()\n");
    speed = 90;
    implement(IMPLEMENT_UP);
    driveStraight(ticks(2.0), BACKWARD);
    implement(IMPLEMENT_UP);
    HeadingToY(122, 6, BACKWARD);
    driveT(-100, 100, 1000L);
    GPSTurnTo(90);
    HeadingToX(25, 90, FORWARD);
    GPSTurn(60, RIGHT);
    speed = 80;
    GPSTurnTo(8);
    speed = 90;
    HeadingToY(45, 7, FORWARD);
    FollowHeading(ticks(4.0), FORWARD, 4);
}
void BoxWall(int gemColor)
{
    int checkedTwice = 0;
    int box1Color = BLUE;
    printf("ToBoxes()\n");
    ToBoxes();
    printf("NextBox()\n");
    NextBox(checkedTwice);
    box1Color = GetGemColor();
    GPSTurnTo(92);
    if(box1Color != gemColor)
      {
        checkedTwice = 1;
        HeadingToX(-39, 92, BACKWARD);
        GPSTurn(40, RIGHT);
        GPSTurnTo(4);
        driveStraight(ticks(5.2), FORWARD); 
        NextBox(checkedTwice);
    }
    speed = 90;
    printf("DropOffGem()\n");
    DropOffGem();
    printf("ToWall()\n");
    speed = 90;
    ToWall(checkedTwice);
    printf("RaiseWall()\n");
    RaiseWall();   
}
