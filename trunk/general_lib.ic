#include "constants_lib.ic"
#include "encoder_lib.ic"
#include "movement_lib.ic"
#include "implement_lib.ic"

void WaitForStartLight(int startLightValue)
{
    while(analog(startLightPort) > startLightValue - START_LIGHT_THRESHOLD && !stop_button());
}
void DropOffDynamite()
{
    // Drive down the ramp
    driveStraight(ticks(26.8), FORWARD);
    
    // Turn toward dynamite dropbox
    //turn(33, FORWARD_LEFT);
    GPSTurn(15, LEFT);
    
    // Drive toward dropbox
    driveStraight(ticks(17.0), FORWARD);
    
    // Drop dynamite
    implement(IMPLEMENT_DOWN);
    sleep(2.0);
    implement(IMPLEMENT_UP);
    sleep(1.0);
}
void GotoPlunger()
{
    int left, right, center;
    left = analog(leftLinePort);
    center = analog(centerLinePort);
    right = analog(rightLinePort);
    // Back up a little
    driveStraight(ticks(12.0), BACKWARD);
    GPSTurn(20, LEFT);
    driveStraight(ticks(14.0), FORWARD);
    GPSTurn(30, RIGHT);
    driveStraightWaitForLine(center);
    GPSTurn(70, LEFT);
}
void HitPlunger(int left, int center, int right)
{
    implement(IMPLEMENT_UP);
    //FollowFor(ticks(8.0), left, right, center);
    FollowHeading(ticks(10.0), FORWARD, 138);
    implement(IMPLEMENT_DOWN);
    msleep(1000L);
    implement(IMPLEMENT_UP);
}
void UpRamp(int left, int center, int right)
{
    driveStraight(ticks(5.0), BACKWARD);
    implement(IMPLEMENT_GEM);
    GPSTurn(175, RIGHT);
    //FollowFor(ticks(15.0), left, center, right);
    //while (!OnLine(rightLinePort, right))
           //GPSTurn(3, RIGHT);
    FollowHeading(ticks(20.0), FORWARD, 138);
}
void DepressPlunger(int leftLineFloorValue, int centerLineFloorValue, int rightLineFloorValue)
{
    // Back up a little
    driveStraight(ticks(7.0), BACKWARD);
    
    turn(50, BACKWARD_LEFT);
    
    // Drive toward plunger
    driveStraight(ticks(19.0), FORWARD);
    
    // Turn toward plunger to help the line-following routine
    turn(100, FORWARD_LEFT);
    
    leftLineFloorValue = analog(leftLinePort);
    centerLineFloorValue = analog(centerLinePort);
    rightLineFloorValue = analog(rightLinePort);
    
    // Drive toward plunger until we hit the second line
    driveStraightWaitForLine(centerLineFloorValue);
    
    lineFollowState = LINE_FOLLOW_LEFT;
    // Follow the line until we bump into the plunger
    while(!(digital(frontLeftSwitch) && digital(frontRightSwitch)))
      {
        followLine(leftLineFloorValue, centerLineFloorValue, rightLineFloorValue);
    }
    drive(0, 0);
    
    // Lower and raise the implement
    implement(IMPLEMENT_DOWN);
    sleep(1.0);
    implement(IMPLEMENT_UP);
}
void GetGem()
{
    
}
/*void GetGem(int leftLineFloorValue, int centerLineFloorValue, int rightLineFloorValue)
{
    long startTime = 0L;
    // Turn backwards and to the right; we're trying to turn 180 around and follow the line
    turn(90, BACKWARD_RIGHT);
    turn(110, BACKWARD_RIGHT);
    
    implement(IMPLEMENT_GEM);
    
    leftLineFloorValue = analog(leftLinePort);
    centerLineFloorValue = analog(centerLinePort);
    rightLineFloorValue = analog(rightLinePort);
    
    driveStraightWaitForLine(centerLineFloorValue);
    
    lineFollowState = LINE_FOLLOW_RIGHT;
    
    // Follow the line up the ramp until we hit the gem
    
    while(!gps_get_data());
    while(gps_y < 130)
      {
        while(!gps_get_data());
        followLine(leftLineFloorValue, centerLineFloorValue, rightLineFloorValue);
    }
    
    startTime = mseconds();
    while(mseconds() < startTime + 1500L)
      {
        drive(100, 100);
    }
    
    while(!gps_get_data());
    while(gps_y < 240)
      {
        while(!gps_get_data());
        followLine(leftLineFloorValue, centerLineFloorValue, rightLineFloorValue);
    }
    
    // Stop
    drive(0, 0);
    
    implement(IMPLEMENT_UP);
}*/
