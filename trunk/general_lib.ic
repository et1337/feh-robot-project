#include "constants_lib.ic"
#include "encoder_lib.ic"
#include "movement_lib.ic"
#include "implement_lib.ic"

void WaitForStartLight(int startLightValue)
{
    while(analog(startLightPort) > startLightValue - START_LIGHT_THRESHOLD && !stop_button());
}
void ArmToGem()
{
    implement(IMPLEMENT_GEM);
    msleep(2000L);
}
void DropOffDynamite()
{
    // Drive down the ramp
    driveStraight(ticks(27.5), FORWARD);
    //driveStraight(ticks(10.5), FORWARD);
    //driveStraightToY(120);
    // Turn toward dynamite dropbox
    //turn(33, FORWARD_LEFT);
    GPSTurn(16, LEFT);
    FollowHeading(ticks(10.0), FORWARD, 43);    
    // Drive toward dropbox
    //driveStraight(ticks(17.0), FORWARD);
    driveStraightToY(175);
    // Drop dynamite
    implement(IMPLEMENT_DOWN);
    sleep(4.0);
    implement(IMPLEMENT_UP);
    sleep(1.0);
}
void GotoPlunger()
{
    int left, right, center;
    left = analog(leftLinePort);
    center = analog(centerLinePort);
    right = analog(rightLinePort);
    // Back up a little
    driveStraight(ticks(12.0), BACKWARD);
    GPSTurn(35, LEFT); // turn to 50
    driveStraight(ticks(14.0), FORWARD);
    GPSTurn(45, RIGHT); // turn to 41
    driveStraight(ticks(8.0), FORWARD);
    driveStraightWaitForLine(center);
    GPSTurn(65, LEFT);
}
void HitPlunger(int left, int center, int right)
{
    int count = 0;
    implement(IMPLEMENT_UP);
    //FollowFor(ticks(8.0), left, right, center);
    //FollowHeading(ticks(11.0), FORWARD, 138);
    //FollowHeading(ticks(6.0), FORWARD, 138);
    //driveStraightToY(190);
    HeadingToY(190, 138, FORWARD);
    implement(IMPLEMENT_DOWN);
    msleep(1500L);
    implement(IMPLEMENT_UP);
    msleep(2000L);
    while (!gps_debris) {
        if (count%2 == 0) driveStraight(ticks(1.0), FORWARD);
        if (count%2 == 1) driveStraight(ticks(1.0), BACKWARD);
        implement(IMPLEMENT_DOWN);
        msleep(1500L);
        implement(IMPLEMENT_UP);
        msleep(2000L);
        count++;
        while(!gps_get_data());
    }
    
}
void UpRamp(int left, int center, int right)
{
    driveStraight(ticks(5.0), BACKWARD);
    GPSTurn(160, RIGHT);
    TurnToHeading(156);
    //FollowFor(ticks(15.0), left, center, right);
    //while (!OnLine(rightLinePort, right))
    //GPSTurn(3, RIGHT);
    driveStraight(ticks(4.0), FORWARD);
    FollowHeading(ticks(10.0), FORWARD, 138);
    ArmToGem();
    FollowHeading(ticks(10.0), FORWARD, 138);
    //driveStraightToY(245);
    //HeadingToY(240, 138, FORWARD);
    //FollowHeading(ticks(5.0), FORWARD, 138);
    msleep(2000L);
}
void GetGem()
{
    /*driveStraight(ticks(3.0), FORWARD);
    driveStraight(ticks(0.8), BACKWARD);
    driveStraight(ticks(3.0), FORWARD);
    driveStraight(ticks(0.8), BACKWARD);
    driveStraight(ticks(3.0), FORWARD);
    driveStraight(ticks(0.8), BACKWARD);
    driveStraight(ticks(3.0), FORWARD);*/
    implement(IMPLEMENT_UP);
    msleep(500L);
    driveStraightP(ticks(0.3), BACKWARD, 40);
    msleep(4000L);
    drive(0, 0);
    msleep(500L);
}

int GetGemColor(int startLightValue, int leftLineFloorValue, int centerLineFloorValue, int rightLineFloorValue)
{
    driveStraight(ticks(0.8), FORWARD);
    msleep(500L);
    //HeadingToY(250, 138, FORWARD);
    if(analog(startLightPort) < RED_THRESHOLD)
    {
        printf("RED GEM\n");
        msleep(1000L);
        return RED;
    }
    msleep(1000L);
    printf("BLUE GEM\n");
    return BLUE;
}

void ToBox()
{
    FollowHeading(ticks(18.0), BACKWARD, 138);
    GPSTurn(45, RIGHT);
    driveStraight(ticks(5.0), FORWARD);
    //driveStraightWaitForLine(analog(centerLinePort));
    HeadingToX(-40, 51, FORWARD);
    GPSTurn(30, RIGHT);
    FollowHeading(ticks(3.0), FORWARD, 6);
    HeadingToLine(analog(centerLinePort), 6, FORWARD);
    GPSTurn(70, LEFT);
}

void DropOffGem(int startLightValue) //, int leftLineFloorValue, int centerLineFloorValue, int rightLineFloorValue)
{
    //FollowLineToX(90, leftLineFloorValue, centerLineFloorValue, rightLineFloorValue);
    HeadingToX(-30, 92, FORWARD);
    implement(IMPLEMENT_DOWN);
    msleep(3000L);
    implement(IMPLEMENT_UP);
    msleep(2000L);
    HeadingToX(-20, 92, FORWARD);
    if (analog(startLightPort) < RED_THRESHOLD)
    {
        printf("RED BOX\n");
    }
    else
    {
        printf("BLUE BOX\n");
    }
    msleep(4000L);
}

void ToWall()
{
    driveStraight(ticks(3.0), BACKWARD);
    GPSTurn(70, RIGHT);
    implement(IMPLEMENT_DOWN);
    msleep(1000L);
    FollowHeading(ticks(5.0), FORWARD, 6);
}

void RaiseWall()
{
    driveStraightWaitForBump();
    implement(IMPLEMENT_UP);
    driveStraight(ticks(3.0), FORWARD);
}

void BackToBase()
{
    driveStraight(ticks(1.0), BACKWARD);
    GPSTurn(180, LEFT);
    driveStraight(ticks(10.0), FORWARD);
    GPSTurn(90, RIGHT);
}
