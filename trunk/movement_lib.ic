#include "constants_lib.ic"
#include "encoder_lib.ic"
#include "gps_lib.ic"
int lineFollowState = LINE_FOLLOW_LEFT;
int OnLine(int port, int value)
{
    return (analog(port) > value + LINE_THRESHOLD);
}
void drive(int left, int right)
{
    motor(leftMotor, left);
    motor(rightMotor, right);
}
void driveT(int left, int right, long time)
{
    drive(left, right);
    msleep(time);
    drive(0, 0);
}
void GPSTurn(int angle, int dir)
{
    int initial, final;
    // Wait for data
    //printf("Turning...\n");
    while(!gps_get_data());
    initial = gps_heading;
    //printf("Got data, initial = %d\n", initial);
    if (dir == LEFT) {
        drive(-speed, speed);
        if (initial + angle > 180)
          {
            while (gps_heading > initial - 1) {
                //printf("%d First\n", gps_heading);
                while(!gps_get_data());
            }
            while (gps_heading < (initial + angle - 180))
              {
                while(!gps_get_data());
                //printf("%d Second\n", gps_heading);
            }
        } else
          while (gps_heading < initial + angle)
            {
              while (!gps_get_data());
              //printf("heading=%d\n",gps_heading);
          }
    } else if (dir == RIGHT) {
        drive(speed, -speed);
        if (initial - angle < 0)
          {
            while (gps_heading < initial + 1) {
                //printf("%d First\n", gps_heading);
                while(!gps_get_data());
            }
            while (gps_heading < (initial - angle + 180))
              {
                while(!gps_get_data());
                //printf("%d Second\n", gps_heading);
            }
        } else
          while (gps_heading > initial - angle)
            {
              while (!gps_get_data());
              //printf("heading=%d\n",gps_heading);
          }
    }
    drive(0,0);
}
void GPSTurnTo(int angle)
{
    long startTime = mseconds();
    while(!gps_get_data());
    while((gps_heading - angle > 1 || gps_heading - angle < -1) && (mseconds() - startTime < 4000L))
      {
        if(gps_heading < angle - 7)
          {
            drive(-speed, speed);
            msleep(50L);
            drive(0, 0);
        } else if(gps_heading > angle + 7)
          {
            drive(speed, -speed);
            msleep(50L);
            drive(0, 0);
        }
        else if(gps_heading < angle)
          {
            drive(-speed, speed);
            msleep(25L);
            drive(0, 0);
        }
        else if(gps_heading > angle + 1)
          {
            drive(speed, -speed);
            msleep(25L);
            drive(0, 0);
        }
        msleep(80L);
        while(!gps_get_data());
    }
}
void driveStraight(int distance, int direction)
{
    drive(speed * direction, speed * direction);
    setEncoder(leftEncoder, 0);
    setEncoder(rightEncoder, 0);
    while(getEncoder(leftEncoder) < distance)
      {
        if(getEncoder(leftEncoder) < getEncoder(rightEncoder) - 1)
          drive(speed * direction, speed/2 * direction);
        else if(getEncoder(rightEncoder) < getEncoder(leftEncoder) - 1)
          drive(speed/2 * direction, speed * direction);
        else
        drive(speed * direction, speed * direction);
    }
    drive(0, 0);
}
void driveStraightP(int distance, int direction, int power)
{
    drive(power * direction, power * direction);
    setEncoder(leftEncoder, 0);
    setEncoder(rightEncoder, 0);
    while(getEncoder(leftEncoder) < distance)
      {
        if(getEncoder(leftEncoder) < getEncoder(rightEncoder) - 1)
          drive(power * direction, (power/2) * direction);
        else if(getEncoder(rightEncoder) < getEncoder(leftEncoder) - 1)
          drive((power/2) * direction, power * direction);
        else
        drive(power * direction, power * direction);
    }
    drive(0, 0);
}

void driveStraightWaitForLine(int floorValue)
{
    drive(speed, speed);
    setEncoder(leftEncoder, 0);
    setEncoder(rightEncoder, 0);
    while((analog(centerLinePort) < floorValue + LINE_THRESHOLD))
      {
        if(getEncoder(leftEncoder) < getEncoder(rightEncoder) - 1)
          drive(speed, speed/2);
        else if(getEncoder(rightEncoder) < getEncoder(leftEncoder) - 1)
          drive((int)speed/2, speed);
        else
        drive(speed, speed);
    }
    drive(0, 0);
}
void driveStraightToY(int y, int dir)
{
    int initial;
    drive(dir*speed, dir*speed);
    setEncoder(leftEncoder, 0);
    setEncoder(rightEncoder, 0);
    while(!gps_get_data());
    initial = gps_y;
    if (initial < y) {
        while(gps_y < y)
          {
            while(!gps_get_data());
            if(getEncoder(leftEncoder) < getEncoder(rightEncoder) - 1)
              drive(dir*speed, dir*speed/2);
            else if(getEncoder(rightEncoder) < getEncoder(leftEncoder) - 1)
              drive(dir*speed/2, dir*speed);
            else
            drive(dir*speed, dir*speed);
        }
    } else {
        while(gps_y > y)
          {
            while(!gps_get_data());
            if(getEncoder(leftEncoder) < getEncoder(rightEncoder) - 1)
              drive(dir*speed, dir*speed/2);
            else if(getEncoder(rightEncoder) < getEncoder(leftEncoder) - 1)
              drive(dir*speed/2, dir*speed);
            else
            drive(dir*speed, dir*speed);
        }
    }
    drive(0, 0);   
}
void HeadingToY(int y, int angle, int direction)
{
    int initial;
    drive(speed, speed);
    setEncoder(leftEncoder, 0);
    setEncoder(rightEncoder, 0);
    while(!gps_get_data());
    initial = gps_y;
    if (initial < y) {
        while(gps_y < y)
          {
            while(!gps_get_data());
            if(gps_heading < angle - 2)
              drive(speed/2 * direction, speed * direction);
            else if(gps_heading < angle - 1)
              drive((speed*4/5) * direction, speed * direction);
            else if(gps_heading > angle + 2)
              drive(speed * direction, speed/2 * direction);
            else if(gps_heading > angle + 1)
              drive(speed * direction, speed*4/5 * direction);
            else
            drive(speed * direction, speed * direction);
            
        }
    } else {
        while(gps_y > y)
          {
            while(!gps_get_data());
            if(gps_heading < angle - 2)
              drive(speed/2 * direction, speed * direction);
            else if(gps_heading < angle - 1)
              drive(speed*4/5 * direction, speed * direction);
            else if(gps_heading > angle + 2)
              drive(speed * direction, speed/2 * direction);
            else if(gps_heading > angle + 1)
              drive(speed * direction, speed*4/5 * direction);
            else
            drive(speed * direction, speed * direction);
        }
    }
    drive(0, 0);   
}
void HeadingToX(int x, int angle, int direction)
{
    int initial;
    //printf("Heading to X=%d", x);
    drive(speed, speed);
    setEncoder(leftEncoder, 0);
    setEncoder(rightEncoder, 0);
    while(!gps_get_data());
    initial = gps_x;
    if (initial < x) {
        while(gps_x < x)
          {
            while(!gps_get_data());
            if(gps_heading < angle - 2)
              drive(speed/2 * direction, speed * direction);
            else if(gps_heading < angle - 1)
              drive(speed*4/5 * direction, speed * direction);
            else if(gps_heading > angle + 2)
              drive(speed * direction, (int)speed/2 * direction);
            else if(gps_heading > angle + 1)
              drive(speed * direction, speed*4/5 * direction);
            else
            drive(speed * direction, speed * direction);
            
        }
    } else {
        while(gps_x > x)
          {
            while(!gps_get_data());
            if(gps_heading < angle - 2)
              drive(speed/2 * direction, speed * direction);
            else if(gps_heading < angle - 1)
              drive(speed*4/5 * direction, speed * direction);
            else if(gps_heading > angle + 2)
              drive(speed * direction, speed/2 * direction);
            else if(gps_heading > angle + 1)
              drive(speed * direction, speed*4/5 * direction);
            else
            drive(speed * direction, speed * direction);
        }
    }
    drive(0, 0);   
}


void FollowHeading(int distance, int direction, int angle)
{
    drive(speed * direction, speed * direction);
    setEncoder(leftEncoder, 0);
    setEncoder(rightEncoder, 0);
    while(getEncoder(leftEncoder) < distance  && getEncoder(rightEncoder) < distance)
      {
        while(!gps_get_data());
        if(gps_heading < angle - 2)
          drive(speed/2 * direction, speed * direction);
        else if(gps_heading < angle - 1)
          drive(speed*4/5 * direction, speed * direction);
        else if(gps_heading > angle + 2)
          drive(speed * direction, speed/2 * direction);
        else if(gps_heading > angle + 1)
          drive(speed * direction, speed*4/5 * direction);
        else
        drive(speed * direction, speed * direction);
    }
    drive(0, 0);
}
void HeadingToLine(int floorValue, int angle, int direction)
{
    drive(speed * direction, speed * direction);
    setEncoder(leftEncoder, 0);
    setEncoder(rightEncoder, 0);
    while((analog(centerLinePort) < floorValue + LINE_THRESHOLD))
      {
        while(!gps_get_data());
        if(gps_heading < angle - 2)
          drive(speed/2 * direction, speed * direction);
        else if(gps_heading < angle - 1)
          drive(speed*4/5 * direction, speed * direction);
        else if(gps_heading > angle + 2)
          drive(speed * direction, speed/2 * direction);
        else if(gps_heading > angle + 1)
          drive(speed * direction, speed*4/5 * direction);
        else
        drive(speed * direction, speed * direction);
    }
    drive(0, 0);
}
void TurnToHeading(int angle)
{
    int initial;
    // Wait for data
    //printf("Turning...\n");
    while(!gps_get_data());
    initial = gps_heading;
    //printf("Got data, initial = %d\n", initial);
    if (initial < angle) {
        drive(-speed, speed);
        while (gps_heading < angle)
          {
            while (!gps_get_data());
            //printf("heading=%d\n",gps_heading);
        }
    } else if (initial > angle) {
        drive(speed, -speed);
        while (gps_heading > angle)
          {
            while (!gps_get_data());
            //printf("heading=%d\n",gps_heading);
        }
    }
    drive(0,0);
    
}
