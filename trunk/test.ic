#use "constants_lib.ic"
#use "encoder_lib.ic"
#use "movement_lib.ic"
#use "implement_lib.ic"
#use "general_lib.ic"
#use "gps_lib.ic"

int main()
{
    int startLightValue = 0;
    int leftLineFloorValue;
    int centerLineFloorValue;
    int rightLineFloorValue;
    int knobValue;
    
    initServo(implementServo);
    initEncoders(); 
    
    implement(IMPLEMENT_UP);
    
    startLightValue = analog(startLightPort);
    leftLineFloorValue = analog(leftLinePort);
    centerLineFloorValue = analog(centerLinePort);
    rightLineFloorValue = analog(rightLinePort);
    
    initGPS();
    
    // Wait for start light or start button.
    while(!stop_button())
      {
        sleep(0.1);
        knobValue = knob() / 24; // value of 0 to 10
        switch (knobValue)
          {
            case 0: printf("0: From Start\n"); break;
            case 1: printf("1: Depress Plunger\n"); break;
            case 2: printf("2: Get Gem\n"); break;
            case 3: printf("3: GPS test\n"); break;
            case 4: printf("4: Servo test\n"); break;
            default: printf("%d: Invalid command\n", knobValue); break;
        }
    }
    while(stop_button());
    switch (knobValue)
      {
        case 0: // Everything
          WaitForStartLight(startLightValue);
        DropOffDynamite();
        DepressPlunger(leftLineFloorValue, centerLineFloorValue, rightLineFloorValue);
        sleep(1.0);
        GetGem(leftLineFloorValue, centerLineFloorValue, rightLineFloorValue);  
        break;
        case 1: // Press plunger, get gem
          DepressPlunger(leftLineFloorValue, centerLineFloorValue, rightLineFloorValue);
        sleep(1.0); // Wait for ramp
        GetGem(leftLineFloorValue, centerLineFloorValue, rightLineFloorValue);   
        break;
        case 2: // Get gem
          GetGem(leftLineFloorValue, centerLineFloorValue, rightLineFloorValue);   
        break;
        case 3: // GPS test
          while(1)
          {
            // Wait for data
            while(!gps_get_data());
            // Print out gps variables
            printf("%d %d %d %d\n", gps_x, gps_y, gps_heading, gps_debris);
        }
        break;
        case 4: // Servo test
          while(1)
          {
            sleep(0.1);
            implement((int)((((float)knob()) / 255.0) * 180.0));
            printf("Servo: %d\n", (int)((((float)knob()) / 255.0) * 180.0));
        }
        break;
    }
    
    sleep(3.0); // Let servos finish moving before disabling
    
    disableServo();
    
    disableGPS();
}
