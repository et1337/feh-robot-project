#use "exp_servo_lib.ic"
#use "exp_servo_calibrate.ic"

#use "fencdr2.icb"
#use "fencdr3.icb"

#use "constants.ic"

void setEncoder(int port, int ticks)
{
    if(port == 2)
      encoder2_counts = ticks;
    else if(port == 3)
      encoder3_counts = ticks;
}

float inches(int ticks)
{
    return ((float)ticks / 24.0) * 6.283185307;
}

int ticks(float inches)
{
    return (int)((inches / 6.283185307) * 24.0);
}

int getEncoder(int port)
{
    if(port == 2)
      return encoder2_counts;
    else if(port == 3)
      return encoder3_counts;
}

void encoderCount(int port, int ticks)
{
    setEncoder(port, 0);
    while(getEncoder(port) < ticks);
}

void drive(int left, int right)
{
    motor(leftMotor, left);
    motor(rightMotor, right);
}

void driveStraight(int distance, int direction)
{
    drive(100 * direction, 100 * direction);
    setEncoder(leftEncoder, 0);
    setEncoder(rightEncoder, 0);
    while(getEncoder(leftEncoder) < distance)
    {
        if(getEncoder(leftEncoder) < getEncoder(rightEncoder) - 1)
          drive(100 * direction, 50 * direction);
        else if(getEncoder(rightEncoder) < getEncoder(leftEncoder) - 1)
          drive(50 * direction, 100 * direction);
        else
          drive(100 * direction, 100 * direction);
        printf("L:%d R:%d\n", getEncoder(leftEncoder), getEncoder(rightEncoder));
    }
}

void driveStraightWaitForLine(int floorValue)
{
    drive(100, 100);
    setEncoder(leftEncoder, 0);
    setEncoder(rightEncoder, 0);
    while((analog(centerLinePort) < floorValue + LINE_THRESHOLD))
    {
        if(getEncoder(leftEncoder) < getEncoder(rightEncoder) - 1)
          drive(100, 50);
        else if(getEncoder(rightEncoder) < getEncoder(leftEncoder) - 1)
          drive(50, 100);
        else
          drive(100, 100);
    }
}

void driveStraightWaitForBump()
{
    drive(100, 100);
    setEncoder(leftEncoder, 0);
    setEncoder(rightEncoder, 0);
    while(!digital(frontLeftSwitch) && !digital(frontRightSwitch))
    {
        if(getEncoder(leftEncoder) < getEncoder(rightEncoder) - 1)
          drive(100, 50);
        else if(getEncoder(rightEncoder) < getEncoder(leftEncoder) - 1)
          drive(50, 100);
        else
          drive(100, 100);
    }
}

int lineFollowState = LINE_FOLLOW_LEFT;
void followLine(int leftLineFloorValue, int centerLineFloorValue, int rightLineFloorValue)
{
    int left = (analog(leftLinePort) > leftLineFloorValue + LINE_THRESHOLD);
    int center = (analog(centerLinePort) > centerLineFloorValue + LINE_THRESHOLD);
    int right = (analog(centerLinePort) > rightLineFloorValue + LINE_THRESHOLD);
    
    if(center)
    {
        if(right)
        {
            drive(100, 50);
            lineFollowState = LINE_FOLLOW_RIGHT;
        }
        else if(left)
        {
            drive(50, 100);
            lineFollowState = LINE_FOLLOW_LEFT;
        }
        else
        {
            drive(100, 100);
        }
    }
    else if(left)
    {
        drive(0, 100);
        lineFollowState = LINE_FOLLOW_LEFT;
    }
    else if(right)
    {
        drive(100, 0);
        lineFollowState = LINE_FOLLOW_RIGHT;
    }
    else
    {
        if(lineFollowState == LINE_FOLLOW_RIGHT)
          drive(100, 0);
        else if(lineFollowState == LINE_FOLLOW_LEFT)
          drive(0, 100);
    }
}

void implement(int angle)
{
    exp_servo_deg(implementServo, angle);
}

int main()
{
    int startLightValue = 0;
    int leftLineFloorValue;
    int centerLineFloorValue;
    int rightLineFloorValue;
    long startTime = 0L;
    
    exp_servo_enable();
    
    exp_servo_min[implementServo] = 2588;
    exp_servo_max[implementServo] = 4078;
    
    encoder2_low_threshold = 25;
    encoder2_high_threshold = 45;

    encoder3_low_threshold = 25;
    encoder3_high_threshold = 45;
    
    implement(IMPLEMENT_UP);
    
    while(!start_button());
    while(start_button());
    
    startLightValue = analog(startLightPort);
    leftLineFloorValue = analog(leftLinePort);
    centerLineFloorValue = analog(centerLinePort);
    rightLineFloorValue = analog(rightLinePort);
    
    // Wait for start light or start button.
    while(!(start_button() || analog(startLightPort) < startLightValue - START_LIGHT_THRESHOLD))
      printf("%d\n", analog(startLightPort));
    
    // Drive down the ramp
    driveStraight(ticks(40.0), FORWARD);
}
