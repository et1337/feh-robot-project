#include "constants_lib.ic"
#include "encoder_lib.ic"
#include "movement_lib.ic"
#include "implement_lib.ic"

void WaitForStartLight(int startLightValue)
{
    while(analog(startLightPort) > startLightValue - START_LIGHT_THRESHOLD && !stop_button());
}
void ArmToGem()
{
    implement(IMPLEMENT_GEM);
    msleep(2000L);
}
void DropOffDynamite()
{
    // Drive down the ramp
    driveStraight(ticks(27.5), FORWARD);
    // Turn toward dynamite dropbox
    GPSTurn(16, LEFT);
    FollowHeading(ticks(10.0), FORWARD, 43);    
    // Drive toward dropbox
    driveStraightToY(175);
    // Drop dynamite
    implement(IMPLEMENT_DOWN);
    sleep(4.0);
    implement(IMPLEMENT_UP);
    sleep(1.0);
}
void GotoPlunger()
{
    int left, right, center;
    left = analog(leftLinePort);
    center = analog(centerLinePort);
    right = analog(rightLinePort);
    // Back up a little
    driveStraight(ticks(12.0), BACKWARD);
    GPSTurn(35, LEFT); // turn to 50
    driveStraight(ticks(14.0), FORWARD);
    GPSTurn(45, RIGHT); // turn to 41
    driveStraight(ticks(8.0), FORWARD);
    driveStraightWaitForLine(center);
    GPSTurn(65, LEFT);
}
void HitPlunger(int left, int center, int right)
{
    int count = 0;
    implement(IMPLEMENT_UP);
    HeadingToY(190, 138, FORWARD);
    implement(IMPLEMENT_DOWN);
    msleep(1500L);
    implement(IMPLEMENT_UP);
    msleep(2000L);
    while (!gps_debris) {
        if (count%2 == 0) driveStraight(ticks(1.0), FORWARD);
        if (count%2 == 1) driveStraight(ticks(1.0), BACKWARD);
        implement(IMPLEMENT_DOWN);
        msleep(1500L);
        implement(IMPLEMENT_UP);
        msleep(2000L);
        count++;
        while(!gps_get_data());
    }
    
}
void UpRamp(int left, int center, int right)
{
    driveStraight(ticks(5.0), BACKWARD);
    GPSTurn(160, RIGHT);
    TurnToHeading(156);
    driveStraight(ticks(4.0), FORWARD);
    FollowHeading(ticks(10.0), FORWARD, 138);
    ArmToGem();
    FollowHeading(ticks(10.0), FORWARD, 138);
    msleep(2000L);
}
void GetGem()
{
    implement(IMPLEMENT_UP);
    msleep(500L);
    driveStraightP(ticks(0.3), BACKWARD, 40);
    msleep(4000L);
    drive(0, 0);
    msleep(500L);
}

int GetGemColor()
{
    long startTime = mseconds();
    drive(50, 50);
    while(mseconds() - startTime < 500L)
    {
        if(analog(startLightPort) < RED_THRESHOLD)
        {
            printf("RED GEM\n");
            drive(0, 0);
            msleep(1000L);
            return RED;
        }
    }
    printf("BLUE GEM\n");
    drive(0, 0);
    msleep(1000L);
    return BLUE;
}

void ToBox()
{
    FollowHeading(ticks(16.0), BACKWARD, 138);
    GPSTurn(45, RIGHT);
    HeadingToX(-65, 51, FORWARD);
    GPSTurn(30, RIGHT);
    FollowHeading(ticks(3.0), FORWARD, 6);
    HeadingToLine(analog(centerLinePort), 6, FORWARD);
    GPSTurn(70, LEFT);
}

void DropOffGem()
{
    HeadingToX(-30, 92, FORWARD);
    implement(IMPLEMENT_DOWN);
    msleep(3000L);
    implement(IMPLEMENT_UP);
    msleep(2000L);
    HeadingToX(-24, 92, FORWARD);
}

void ToWall()
{
    driveStraight(ticks(3.0), BACKWARD);
    GPSTurn(70, RIGHT);
    implement(IMPLEMENT_DOWN);
    msleep(1000L);
    FollowHeading(ticks(5.0), FORWARD, 6);
}

void RaiseWall()
{
    driveStraightWaitForBump();
    implement(IMPLEMENT_UP);
    driveStraight(ticks(3.0), FORWARD);
}

void BackToBase()
{
    driveStraight(ticks(1.0), BACKWARD);
    GPSTurn(180, LEFT);
    driveStraight(ticks(10.0), FORWARD);
    GPSTurn(90, RIGHT);
}
