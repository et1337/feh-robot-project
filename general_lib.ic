#include "constants_lib.ic"
#include "encoder_lib.ic"
#include "movement_lib.ic"
#include "implement_lib.ic"


void WaitForStartLight(int startLightValue)
{
    while(analog(startLightPort) > startLightValue - START_LIGHT_THRESHOLD && !start_button());
}

void DropOffDynamite()
{
    // Drive down the ramp
    // Originally 27.5
    speed = 90;
    //driveStraight(ticks(26.5), FORWARD);
    driveStraight(ticks(10.0), FORWARD);
    driveStraightToY(115);
    // Turn toward dynamite dropbox
    GPSTurn(17, LEFT);
    GPSTurnTo(43);
    FollowHeading(ticks(10.0), FORWARD, 43);    
    // Drive toward dropbox
    driveStraightToY(176);
    // Drop dynamite
    implement(IMPLEMENT_DOWN);
    msleep(1000L);
    driveStraight(ticks(0.5), BACKWARD);
    implement(IMPLEMENT_UP);
    msleep(1000L);
}
void GotoPlunger()
{
    int left, right, center;
    left = analog(leftLinePort);
    center = centerLine;
    right = analog(rightLinePort);
    // Back up a little
    //speed = 100;
    driveStraight(ticks(12.0), BACKWARD);
    GPSTurn(20, LEFT);
    GPSTurnTo(90);
    driveStraight(ticks(14.0), FORWARD);
    GPSTurn(32, RIGHT); // turn to 41
    GPSTurnTo(41);
    driveStraight(ticks(8.0), FORWARD);
    driveStraightWaitForLine(center);
    driveStraight(ticks(1.4), FORWARD);
    drive(-100, 100);
    msleep(700L);
    GPSTurnTo(138);
}
void HitPlunger(int left, int center, int right)
{
    int count = 0;
    printf("HitPlunger()\n");
    implement(IMPLEMENT_UP);
    HeadingToY(190, 138, FORWARD);
    implement(IMPLEMENT_DOWN);
    msleep(500L);
    implement(IMPLEMENT_UP);
    msleep(2000L);
    /*while (!gps_debris) {
        if (count%2 == 0) driveStraight(ticks(1.0), FORWARD);
        if (count%2 == 1) driveStraight(ticks(1.0), BACKWARD);
        msleep(1500L);
        implement(IMPLEMENT_PLUNGER);
        msleep(500L);
        implement(IMPLEMENT_UP);
        count++;
        while(!gps_get_data());
    }*/
    
}
void UpRamp()
{
    printf("UpRamp()\n");
    speed = 100;
    driveStraight(ticks(5.0), BACKWARD);
    GPSTurn(160, RIGHT);
    driveStraight(ticks(.4), BACKWARD);
    //TurnToHeading(158);
    GPSTurnTo(138);
    driveStraight(ticks(4.0), FORWARD);
    FollowHeading(ticks(10.0), FORWARD, 138);
    implement(IMPLEMENT_GEM);
    msleep(500L);
    FollowHeading(ticks(9.5), FORWARD, 138);
    msleep(200L);
}
void GetGem()
{
    implement(IMPLEMENT_UP);
    msleep(400L);
    driveT(40, 40, 250L);
    driveT(-40, -40, 50L);
    //driveStraightP(ticks(0.35), BACKWARD, 40);
    driveT(40, 40, 250L);
    msleep(1000L);
    speed = 80;
}

int GetGemColor()
{
    drive(70, 70);
    if(GemColorHelper(250L) == RED)
      return RED;
    drive(-60, -60);
    if(GemColorHelper(30L) == RED)
      return RED;
    drive(100, -100);
    if(GemColorHelper(300L) == RED)
      return RED;
    drive(-100, 100);
    if(GemColorHelper(600L) == RED)
      return RED;
    printf("BLUE GEM\n");
    return BLUE;
}

int GemColorHelper(long time)
{
    long startTime = mseconds();
    while(mseconds() - startTime < time)
      {
        if(analog(startLightPort) < RED_THRESHOLD)
          {
            printf("RED GEM\n");
            drive(0, 0);
            return RED;
        }
    }
    drive(0, 0);
    return BLUE;
}

void ToBoxes()
{
    
    FollowHeading(ticks(16.7), BACKWARD, 138);
    GPSTurn(59, RIGHT);
    HeadingToX(-55, 47, FORWARD);
    drive(100, -100);
    msleep(200L);
    GPSTurnTo(2);
    FollowHeading(ticks(3.0), FORWARD, 2);
}

void NextBox(int firstBox)
{
    printf("NextBox(%d)\n", firstBox);
    if(firstBox)
      {
        FollowHeading(ticks(1.4), 2, FORWARD);
        speed = 60;
        HeadingToLine(centerLine, 2, FORWARD);
        speed = 80;
    }                
    else
      {  
        
        FollowHeading(ticks(1.4), 4, FORWARD);speed = 60;
        HeadingToLine(centerLine, 4, FORWARD);speed = 80;
    }    
    driveStraight(ticks(0.5), FORWARD);
    driveT(-100, 100, 300L);
    GPSTurnTo(90);
    HeadingToX(-30, 90, FORWARD);
}

void DropOffGem()
{
    //HeadingToX(-30, 92, BACKWARD);
    FollowHeading(ticks(1.3), BACKWARD, 90);
    implement(IMPLEMENT_DOWN);
    msleep(2000L);
    implement(IMPLEMENT_UP);
    msleep(500L);
}

void ToWall(int checkedTwice)
{
    driveStraight(ticks(3.0), BACKWARD);
    GPSTurn(50, RIGHT);
    GPSTurnTo(6);
    if (checkedTwice)
      FollowHeading(ticks(5.0), BACKWARD, 6);
    implement(IMPLEMENT_DOWN);
    msleep(500L);
    if (checkedTwice) FollowHeading(ticks(5.0), FORWARD, 6);
    FollowHeading(ticks(6.4), FORWARD, 6);
}

void RaiseWall()
{
    printf("RaiseWall()\n");
    driveStraightP(ticks(0.1), BACKWARD, 20);
    implement(IMPLEMENT_WALL);
    msleep(250L);
    driveStraightP(ticks(4.0), FORWARD, 60);
    driveT(60, 60, 1000L);
}

void BackToBase()
{
    printf("BackToBase()\n");
    speed = 90;
    implement(IMPLEMENT_UP);
    driveStraight(ticks(2.0), BACKWARD);
    implement(IMPLEMENT_UP);
    HeadingToY(122, 6, BACKWARD);
    drive(-100, 100);
    msleep(500L);
    GPSTurnTo(90);
    HeadingToX(22, 90, FORWARD);
    GPSTurn(68, RIGHT);
    HeadingToY(45, 8, FORWARD);
    FollowHeading(ticks(4.0), FORWARD, 4);
}
void BoxWall(int gemColor)
{
    int checkedTwice = 0;
    int box1Color = BLUE;
    printf("ToBoxes()\n");
    ToBoxes();
    printf("NextBox()\n");
    NextBox(checkedTwice);
    box1Color = GetGemColor();
    GPSTurnTo(88);
    if(box1Color != gemColor)
      {
        checkedTwice = 1;
        HeadingToX(-39, 90, BACKWARD);
        GPSTurn(40, RIGHT);
        GPSTurnTo(4);
        driveStraight(ticks(4.0), BACKWARD); 
        //driveStraight(ticks(2.0), FORWARD); 
        speed = 60;
        HeadingToLine(centerLine, 10, FORWARD);
        NextBox(checkedTwice);
    }
    speed = 80;
    printf("DropOffGem()\n");
    DropOffGem();
    printf("ToWall()\n");
    speed = 80;
    ToWall(checkedTwice);
    printf("RaiseWall()\n");
    RaiseWall();   
}
